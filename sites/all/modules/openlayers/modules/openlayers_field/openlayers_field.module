<?php
/**
 * @file
 * Openlayers field module.
 */

/**
 * Implements hook_field_info().
 */
function openlayers_field_field_info() {
  return array(
    // We name our field as the associative name of the array.
    'openlayers_map' => array(
      'label' => t('Openlayers map'),
      'description' => t('Display a map.'),
      'default_widget' => 'openlayers_map_widget',
      'default_formatter' => 'openlayers_map_formatter',
      'instance_settings' => array(
        'force_default' => FALSE,
        'allowed_maps' => array()
      )
    ),
  );
}

/**
 * Implements hook_field_instance_settings_form().
 */
function openlayers_field_field_instance_settings_form($field, $instance) {
  $form['force_default'] = array(
    '#type' => 'checkbox',
    '#title' => t('Always use default value'),
    '#default_value' => $instance['settings']['force_default'],
    '#description' => t('Hides this field in forms and enforces the configured default value.')
  );
  $form['allowed_maps'] = array(
    '#title' => 'Allowed maps',
    '#description' => 'Only selected maps will be available for authors. Leave empty to allow all.',
    '#type' => 'checkboxes',
    '#default_value' => array_filter($instance['settings']['allowed_maps']),
    '#options' => \Drupal\openlayers\Openlayers::loadAllAsOptions('map')
  );
  return $form;
}

/**
 * Implements hook_field_is_empty().
 */
function openlayers_field_field_is_empty($item, $field) {
  return empty($item['value']);
}

/**
 * Implements hook_field_presave().
 */
function openlayers_field_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
  foreach($items as $delta => $item) {
    if (empty($item['value'])) {
      unset($items[$delta]);
    }
  }
}

/**
 * Implements hook_field_prepare_view().
 */
function openlayers_field_field_prepare_view($entity_type, $entities, $field, $instances, $langcode, &$items) {
  foreach($items as $entity_id => &$instance_items) {
    if ($instances[$entity_id]['settings']['force_default']) {
      $instance_items = $instances[$entity_id]['default_value'];
    }
  }
}

/**
 * Implements hook_field_formatter_info().
 */
function openlayers_field_field_formatter_info() {
  return array(
    'openlayers_map_formatter' => array(
      'label' => t('Openlayers map'),
      'field types' => array('openlayers_map'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function openlayers_field_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {
    // This formatter simply outputs the field as text and with a color.
    case 'openlayers_map_formatter':
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#type' => 'openlayers',
          '#map' => $item['value']
        );
      }
      break;
  }

  return $element;
}

/**
 * Implements hook_field_widget_info().
 */
function openlayers_field_field_widget_info() {
  return array(
    'openlayers_map_widget' => array(
      'label' => t('Simple map select'),
      'field types' => array('openlayers_map'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function openlayers_field_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $allowed_maps = array_filter($instance['settings']['allowed_maps']);
  $widget = array();
  $options = array();

  foreach($allowed_maps as $machine_name) {
    $map = \Drupal\openlayers\Openlayers::load('map', $machine_name);
    $options[$machine_name] = $map->name;
  }

  if (empty($options)) {
    $options = \Drupal\openlayers\Openlayers::loadAllAsOptions('map');
  }

  if (isset($form['#type']) && $form['#type'] == 'fieldset') {
    $instance['settings']['force_default'] = FALSE;
  }

  switch ($instance['widget']['type']) {
    case 'openlayers_map_widget':
      $widget = array(
        '#type' => 'select',
        '#title' => 'Openlayers map',
        '#required' => $element['#required'],
        '#empty_value' => 0,
        '#options' => $options,
        '#default_value' => isset($items[$delta]['value']) ? $items[$delta]['value'] : NULL,
        '#description' => 'Select the map to display',
        '#access' => !$instance['settings']['force_default']
      );
  }

  return array('value' => $widget);
}
